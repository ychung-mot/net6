apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: ${PROJECT_NAME}
labels:
  template: api-deploy
objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      creationTimestamp: null
      labels:
        shared: true
      name: ${NAME}
    spec:
      lookupPolicy:
        local: false
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      creationTimestamp: null
      name: ${NAME}${SUFFIX}
    spec:
      replicas: 1
      selector:
        deploymentconfig: ${NAME}${SUFFIX}
      strategy:
        activeDeadlineSeconds: 21600
        rollingParams:
          intervalSeconds: 1
          maxSurge: 1
          maxUnavailable: 1
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          creationTimestamp: null
          labels:
            deploymentconfig: ${NAME}${SUFFIX}
        spec:
          initContainers: # check if logdb is ready, and only continue when true
            - name: check-logdb-ready
              image: image-registry.openshift-image-registry.svc:5000/2d982c-tools/postgresql-10:1
              command:
                [
                  "sh",
                  "-c",
                  "until pg_isready -h ${LOGDB_NAME}${SUFFIX} -p 5432;  do echo waiting for database; sleep 2; done;",
                ]
          containers:
            - image: ${NAME}:${VERSION}
              name: api
              ports:
                - containerPort: 8080
                  protocol: TCP
              resources:
                requests:
                  cpu: ${CPU}
                  memory: ${MEMORY}
                limits:
                  cpu: ${CPU}
                  memory: ${MEMORY}
              livenessProbe:
                httpGet:
                  path: /healthz
                  port: 8080
                initialDelaySeconds: 15
                timeoutSeconds: 5
                periodSeconds: 10
              env:
                - name: ConnectionStrings__CRT
                  valueFrom:
                    secretKeyRef:
                      name: api-connections-${ENV}
                      key: crt.db
                - name: ConnectionStrings__serilog
                  valueFrom:
                    secretKeyRef:
                      name: ${LOGDB_NAME}${SUFFIX}
                      key: connection-string
                - name: JWT__Authority
                  valueFrom:
                    secretKeyRef:
                      name: sso-configs-${ENV}
                      key: JWT_SSO_AUTHORITY
                - name: JWT__Audience
                  valueFrom:
                    secretKeyRef:
                      name: sso-configs-${ENV}
                      key: JWT_SSO_AUDIENCE
                - name: ServiceAccount__User
                  valueFrom:
                    secretKeyRef:
                      name: service-account-${ENV}
                      key: SERVICE_USER
                - name: ServiceAccount__Password
                  valueFrom:
                    secretKeyRef:
                      name: service-account-${ENV}
                      key: SERVICE_PASSWORD
                - name: ServiceAccount__Server
                  valueFrom:
                    secretKeyRef:
                      name: service-account-${ENV}
                      key: SERVER
                - name: ServiceAccount__Port
                  valueFrom:
                    secretKeyRef:
                      name: service-account-${ENV}
                      key: PORT
                - name: Keycloak__ServiceClientId
                  valueFrom:
                    secretKeyRef:
                      name: keycloak-service-account
                      key: clientId
                - name: Keycloak__ServiceClientSecret
                  valueFrom:
                    secretKeyRef:
                      name: keycloak-service-account
                      key: clientSecret
                - name: Router__ApiKey
                  valueFrom:
                    secretKeyRef:
                      name: api-keys-${ENV}
                      key: router
                - name: Geocoder__ApiKey
                  valueFrom:
                    secretKeyRef:
                      name: api-keys-${ENV}
                      key: geocoder
                - name: ASPNETCORE_ENVIRONMENT
                  value: ${ASPNETCORE_ENVIRONMENT}
              volumeMounts:
                - name: ${NAME}${SUFFIX}-config-volume
                  mountPath: /opt/app-root/configmap
                  readOnly: true
          volumes:
            - name: ${NAME}${SUFFIX}-config-volume
              configMap:
                defaultMode: 420
                name: api-appsettings-${ENV}
      test: false
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - api
            from:
              kind: ImageStreamTag
              name: ${NAME}:${VERSION}
          type: ImageChange
        - type: ConfigChange
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      name: ${NAME}${SUFFIX}
    spec:
      ports:
        - name: web
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        deploymentconfig: ${NAME}${SUFFIX}
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      annotations:
        haproxy.router.openshift.io/timeout: 5m
      creationTimestamp: null
      name: ${NAME}-${ENV}
    spec:
      host: api-${HOST}
      path: "/"
      port:
        targetPort: web
      tls:
        termination: edge
      to:
        kind: Service
        name: ${NAME}${SUFFIX}
        weight: 100
      wildcardPolicy: None
parameters:
  - description: Name of the project (CRT)
    displayName: PROJECT_NAME
    name: PROJECT_NAME
    required: true
    value: "crt"
  - description: A name used for all objects
    displayName: Name
    name: NAME
    required: true
    value: "api"
  - description: A name used for all objects
    displayName: LOGDB_NAME
    name: LOGDB_NAME
    required: true
    value: "logdb"
  - description: A name suffix used for all objects
    displayName: Suffix
    name: SUFFIX
    required: false
    value: "-dev"
  - description: Environment short name (dev,test,uat,prod)
    displayName: ENV
    name: ENV
    required: false
    value: "dev"
  - description: A version used for the image tags
    displayName: version
    name: VERSION
    required: true
    value: "v1.0.0"
  - description: The ASP Net Core deployment environment setting
    displayName: AspNetCore Environment
    name: ASPNETCORE_ENVIRONMENT
    required: true
    value: "Development"
  - description: HOST
    displayName: HOST
    name: HOST
    required: true
    value: ""
  - description: SOURCE_REPOSITORY_URL
    displayName: SOURCE_REPOSITORY_URL
    name: SOURCE_REPOSITORY_URL
    required: false
    value: ""
  - description: SOURCE_REPOSITORY_REF
    displayName: SOURCE_REPOSITORY_REF
    name: SOURCE_REPOSITORY_REF
    required: false
    value: ""
  - description: CPU
    displayName: CPU Request
    name: CPU
    required: true
    value: ""
  - description: MEMORY
    displayName: MEMORY Request
    name: MEMORY
    required: true
    value: ""
